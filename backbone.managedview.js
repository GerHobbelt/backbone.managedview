// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Backbone.ManagedView = (function(_super) {

    __extends(ManagedView, _super);

    function ManagedView() {
      this.removeViews = __bind(this.removeViews, this);

      this.renderViews = __bind(this.renderViews, this);

      this.collectViews = __bind(this.collectViews, this);

      this.remove = __bind(this.remove, this);

      this.render = __bind(this.render, this);

      this.afterRemove = __bind(this.afterRemove, this);

      this.afterRender = __bind(this.afterRender, this);

      this.beforeRender = __bind(this.beforeRender, this);

      this.insert = __bind(this.insert, this);
      return ManagedView.__super__.constructor.apply(this, arguments);
    }

    ManagedView.prototype._configure = function(options) {
      this.views = options.views || {};
      return ManagedView.__super__._configure.apply(this, arguments);
    };

    ManagedView.prototype.insert = function() {};

    ManagedView.prototype.beforeRender = function() {};

    ManagedView.prototype.afterRender = function() {};

    ManagedView.prototype.afterRemove = function() {};

    ManagedView.prototype.render = function() {
      this.beforeRender();
      this.insert();
      this.$el.html(this.template(this));
      this.renderViews();
      this.afterRender();
      this.trigger("render");
      return this;
    };

    ManagedView.prototype.remove = function() {
      ManagedView.__super__.remove.apply(this, arguments);
      this.removeViews();
      this.afterRemove();
      this.trigger("remove");
      return this;
    };

    ManagedView.prototype.collectViews = function() {
      var views,
        _this = this;
      views = [];
      _(this.views).each(function(view, viewName) {
        var viewChild, _i, _len, _results;
        if (_(view).isArray()) {
          _results = [];
          for (_i = 0, _len = view.length; _i < _len; _i++) {
            viewChild = view[_i];
            _results.push(views.push(viewChild));
          }
          return _results;
        } else {
          return views.push(view);
        }
      });
      return views;
    };

    ManagedView.prototype.renderViews = function() {
      var _this = this;
      return _(this.views).each(function(view, selector) {
        var childView, _i, _len, _results;
        if (_(view).isArray()) {
          _results = [];
          for (_i = 0, _len = view.length; _i < _len; _i++) {
            childView = view[_i];
            if (!(typeof childView.insert === "function" ? childView.insert(_this.$(selector)[0]) : void 0)) {
              _this.$(selector).append(childView.el);
            }
            _results.push(childView.render());
          }
          return _results;
        } else {
          _this.$(selector).replaceWith(view.el);
          return view.render();
        }
      });
    };

    ManagedView.prototype.removeViews = function() {
      var view, _i, _len, _ref, _results;
      _ref = this.collectViews();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        view = _ref[_i];
        _results.push(view.remove());
      }
      return _results;
    };

    return ManagedView;

  })(Backbone.View);

}).call(this);
